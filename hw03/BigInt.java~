/* File: BigInt.java
 * Date: 2/15/14
 * Author:  Lai Wei
 * Class: CS 112, Spring 2015
 * Purpose: This is my homework 3 problem B2.
 */

public class BigInt  { 
  
  private final int[] Zero = {0}; 
  private final int[] One = {1}; 
  private final int[] NullArray = {}; 
  
  private  int[] A;                       // Array of digits; default initialization is to 0  
  
  // Variety of constructors for building new instances of BigInt from various data types. 
  
  public BigInt() {               // Default value is 0
    A = Zero; 
  }
  
  public BigInt(int[] B) {        
    A = removeLeadingZeros(B); 
    
  }
  
  
  public BigInt(String s) {
    A = removeLeadingZeros(parse(s));
  }
  
  public BigInt(int n) {                                
    int[] B = new int[(int)Math.ceil(Math.log10(n))];
    for(int i = B.length-1; i >= 0; --i) {
      B[i] = n % 10;
      n = n / 10; 
    }
    A = B; 
  }
  
  // returns true iff s is a non-empty string of digits
  // this is a static method, and must be called using the syntax:  BigInt.legalBigInt(...)
  
  public static boolean legalBigInt(String s) {
    char [] test = s.toCharArray();                                                 // change the string to a char array  
    if (test.length==0){
      return false;
    }
    for(int i =0; i < test.length ; ++i){                                       
      if ((int)test[i] - '0' < 0 || (int)test[i] - '0' >= 10){                      // Change the char in the list to their ascii code
        return false;                                                               // 0 - 9 are the ascii code for integer 0 to 9.
      }
    }
    return true;
    }
  
          
  // Same as previous but for arrays of ints, all ints must be single digits
  
  public static boolean legalBigInt(int[] B) {
    if( B.length ==0){
      return false;
    }
    
    for(int i = 0; i< B.length;++i){
      if (B[i] <= 0 || B[i] >= 10){
        return false;   }
    }
    return true;
  }
  
  // convert String into array of digits; return empty array NullArray if not legal
  private int[] parse(String s) {                                                                  // use (int)test[i]-'0' to convert each single char to digits
    if (BigInt.legalBigInt(s)== false){                                                           // use toCharArray() to convert the string to array of chars.
      return NullArray;
    }
     char [] test = s.toCharArray();
     int  [] test1 = new int[test.length];
     for(int i=0; i < test.length; ++i){
       test1[i] = (int)test[i]-'0';
     }
    
    return test1; 
  }
  
  // returns the string representation of this BigInt
  
  public  String toString() {
  String test ="";
   for(int i =0; i< A.length;++i){
      test = test +String.valueOf(A[i]);
    }
      
    return test;
    
  }
  
  // This will return a new array without leading zeros, by moving
  // digits over to a new array; however, if the input C is a single 0
  // (as in the variable Zero), then it returns this unchanged. 
  
  private int[] removeLeadingZeros(int[] C) {                                     // construct a new array and put in the digits that leading zeros are removed
      if (C[0]==0 && C.length ==1){
      return C;
      }
    
    int count = 0;
     while(C[count] ==0){
      ++count;
    }
    int[] test = new int[C.length-count];
    for(int i =0;i < test.length; ++i){
      test[i] = C[count+i];
    }
      return test;
  }
  
  
  
  // Add BigInt B to this BigInt and return a new BigInt with the sum
  
  public BigInt add(BigInt B) {
    return new BigInt( removeLeadingZeros( add(A, B.A) ) );
  }
  
  
 // my addzero helper function
  public static int[] addzero(int[] A1,int[]B){                                  //  my helper function. Inputs two array of integers and add leading zeros to the shorter array
      int [] B1 = new int[A1.length];                                            // for example if 234 and 23 are put in. 023 will be returned
      int [] B2 = new int[B.length];
  if ( A1.length > B.length){ 
     
      for(int i =0; i<A1.length-B.length; ++i){
        B1[i]=0;
      }
      for(int i =0; i < B.length; ++i){
        B1[A1.length-B.length+i] = B[i];
      }
      return B1;   
      }
if (A1.length < B.length){
  for(int i = 0; i<B.length-A1.length;++i){
    B2[i]=0;
  }
  for (int i =0; i<A1.length;++i){
    B2[B.length-A1.length+i]= A1[i];
  }
  return B2;
}
else
  return A1;
}
      
 
   
 // Helper method for previous, just working on two arrays
 // add two arrays together
  private int[] add(int[] A1, int[] B) {
    int carrybit =0;                                                                    // with my helper function add zero, I can have two array which have the same length
     int test[] = new int[A1.length+1];                                                    // So that I can use for loop to add tha single elements in the array 
     int A2 [] = addzero(A1,B);                                                              
     if(B.length > A1.length){ 
       test = add(B,A1);
       return test;
     }
     if(B.length < A1.length){
         for(int i= A1.length-1;i>=0;--i){
        if (A1[i] + A2[i]+carrybit >=10){
          test[i+1] = A1[i]+A2[i]-10+carrybit;
            carrybit=1;
        }
        if (A1[i] + A2[i] + carrybit<10){
          test[i+1] = A1[i]+ A2[i] +carrybit;
            carrybit=0;
        }
        test[0] = carrybit;
      }
    return test;
     }
     else{
        for(int i= A1.length-1;i>=0;--i){
        if (A1[i] + B[i]+carrybit >=10){
          test[i+1] = A1[i]+B[i]-10+carrybit;
            carrybit=1;
        }
        if (A1[i] + B[i] + carrybit<10){
          test[i+1] = A1[i]+ B[i] +carrybit;
            carrybit=0;
        }
        test[0] = carrybit;
      }
    return test;
    }
  }
    
         
    
    
  // Add 1 to this BigInt
  
  public BigInt incr() {
    return new BigInt( removeLeadingZeros( add(A,One) ) ); 
  }
  
  // This will return -1, 0 or 1, depending on whether this < B, this == B, or this > B
  
  public int compareTo(BigInt B) {
    return compareTo(A, B.A);
  }
  
  // Helper method for previous, just working on two arrays
  
  private int compareTo(int[] A, int[] B) {
    int [] D= removeLeadingZeros(A);                                                                    // remove leading zeros
    int [] E= removeLeadingZeros(B);                                                                      
   
    if (D.length < E.length){                                                                           // check length first
      return -1;
    }
   if (D.length > E.length){
      return 1;
    }
  if(D.length == E.length){                                                                              //checking each pair of digits: if one is bigger than the other,
                                                                                                         // then that number is bigger
      for(int i =0; i < D.length;++i){
        if(D[i]<E[i]){
          return -1;
        }
        if(D[i] > E[i]){
          return 1;
        }
      }
    }
      
       return 0;
  }
          
      

      
  
// just a debugging print method for arrays
  
  private static void printArray(int[]A) {
    for(int i = 0; i < A.length; ++i)
      System.out.print(A[i] + " ");
    System.out.println(); 
  }
  
// Unit Test: Here is where we put tests to verify that this class works properly; it is
// not used except for debugging and testing purposes, and will be ignored when you use
// this class as an Abstract Data Type
  
  public static void main(String [] args) {
   

    System.out.println("\nUnit Test for BigInt Class\n");
    
    int[] A = {9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9};
    int[] B = {3,4,3,4,5,6,7,5,6,4,5,3,4,8,7,9,0,6,7,1,0,5,2,8,6,7,3,4,5,9};
    int[] C = {9,5,6,7,5,6,4,6,7,3,4,5,5,3,4,8,7,9,0,6,7,1,0,5,2,8,2,4,3};
    int[] D = {2, 3, 4};
    int[] Error = {2,3,4,23, 6, 7};
    int[] Error2 = {};   
    
    int testNum = 0; 
    
    BigInt BIA = new BigInt(A);    // test constructors
    BigInt BIB = new BigInt(B); 
    BigInt BIC = new BigInt(C); 
    BigInt BID = new BigInt(D); 
    int[] zero = {0};
    BigInt BI0 = new BigInt(zero); 
    int[] one = {1};
    BigInt BI1 = new BigInt(one); 
    
    
    
    BigInt Temp = new BigInt("234"); 
    
    System.out.println("Testing constructors and toString....\n"); 
    System.out.println("Test " + (++testNum) + ": Should be:\n0"); 
    System.out.println((new BigInt()).toString()); 
    System.out.println();  
    
    System.out.println("Test " + (++testNum) + ": Should be:\n234"); 
    System.out.println(BID.toString()); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n123"); 
    System.out.println((new BigInt("123")).toString()); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n345"); 
    System.out.println((new BigInt(345)).toString()); 
    System.out.println(); 
    
    System.out.println("Testing legalBigInt....\n"); 
    System.out.println("Test " + (++testNum) + ": Should be:\ntrue"); 
    System.out.println(BigInt.legalBigInt(D)); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\nfalse"); 
    System.out.println(BigInt.legalBigInt(Error)); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\nfalse"); 
    System.out.println(BigInt.legalBigInt(Error2)); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\nfalse"); 
    System.out.println(BigInt.legalBigInt("")); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\ntrue"); 
    System.out.println(BigInt.legalBigInt("23454")); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\nfalse"); 
    System.out.println(BigInt.legalBigInt("-234")); 
    System.out.println();
    
    System.out.println("Testing removeLeadingZeros....\n"); 
    
    int[] Z = {0,1,3};
    int[] Z2 = {0,0,0,0,1,3};
    
    System.out.println("Test " + (++testNum) + ": Should be:\n0"); 
    printArray(Temp.removeLeadingZeros(Temp.Zero)); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n1"); 
    printArray(Temp.removeLeadingZeros(Temp.One)); 
    System.out.println();   
    
    System.out.println("Test " + (++testNum) + ": Should be:\n1 3"); 
    printArray(Temp.removeLeadingZeros(Z)); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n1 3"); 
    printArray(Temp.removeLeadingZeros(Z2)); 
    System.out.println(); 
    
    System.out.println("Testing add....\n"); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n468"); 
    System.out.println(BID.add(BID)); 
    System.out.println();  
    
    System.out.println("Test " + (++testNum) + ": Should be:\n234"); 
    System.out.println(BID.add(BI0)); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n235"); 
    System.out.println(BID.add(BI1)); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n100000000000000000000000000000000000000"); 
    System.out.println(BIA.add(BI1)); 
    System.out.println();  
    
    System.out.println("Test " + (++testNum) + ": Should be:\n439132403188041394617239201702"); 
    System.out.println(BIB.add(BIC)); 
    System.out.println(); 
    
    System.out.println("Testing incr....\n"); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n2"); 
    System.out.println(BI1.incr()); 
    System.out.println();  
    
    System.out.println("Testing compare....\n"); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n1"); 
    System.out.println(BI1.compareTo(BI0)); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n0"); 
    System.out.println(BID.compareTo(new BigInt("234"))); 
    System.out.println(); 
    
    System.out.println("Test " + (++testNum) + ": Should be:\n-1"); 
    System.out.println(BIC.compareTo(BIB)); 
    System.out.println(); 
    
    System.out.println("Just for fun, here's the first 696 digits of Pi added four times......\n"); 
    
    int[] Pi = {3,1,4,1,5,9,2,6,5,3,5,8,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,
      7,1,6,9,3,9,9,3,7,5,1,0,5,8,2,0,9,7,4,9,4,4,5,9,2,3,0,7,8,1,6,4,0,6,2,8,6, 2,0,8,9,9,8,
      6,2,8,0,3,4,8,2,5,3,4,2,1,1,7,0,6,7,9,8,2,1,4,8,0,8,6,5,1,3,2,8,2,3,0,6,6,4,7,0,9,3,8,4,
      4,6,0,9,5,5,0,5,8,2,2,3,1,7,2,5,3,5,9,4,0,8,1,2,8,4,8,1, 11,7,4,5,0,2,8,4,1,0,2,7,0,1,9,
      3,8,5,2,1,1,0,5,5,5,9,6,4,4,6,2,2,9,4,8,9,5,4,9,3,0,3,8,1,9,6,4,4,2,8,8,1,0,9,7,5,6,6,5,
      9,3,3,4,4,6,1,2,8,4,7,5,6,4,8,2,3,3, 7,8,6,7,8,3,1,6,5,2,7,1,2,0,1,9,0,9,1,4,5,6,4,8,5,6,
      6,9,2,3,4,6,0,3,4,8,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,3,7,2,
      4,5,8,7,0,0,6, 6,0,6,3,1,5,5,8,8,1,7,4,8,8,1,5,2,0,9,2,0,9,6,2,8,2,9,2,5,4,0,9,1,7,1,5,3,6,
      4,3,6,7,8,9,2,5,9,0,3,6,0,0,1,1,3,3,0,5,3,0,5,4,8,8,2,0,4,6,6,5,2,1,3,8,4,1,4,6, 9,5,1,9,4,1,
      5,1,1,6,0,9,4,3,3,0,5,7,2,7,0,3,6,5,7,5,9,5,9,1,9,5,3,0,9,2,1,8,6,1,1,7,3,8,1,9,3,2,6,1,1,7,9,3,
      1,0,5,1,1,8,5,4,8,0,7,4,4,6,2,3,7,9,9,6,2,7,4,9, 5,6,7,3,5,1,8,8,5,7,5,2,7,2,4,8,9,1,2,2,7,9,3,8,
      1,8,3,0,1,1,9,4,9,1,2,9,8,3,3,6,7,3,3,6,2,4,4,0,6,5,6,6,4,3,0,8,6,0,2,1,3,9,4,9,4,6,3,9,5,2,2,4,7,3,
      7,1,9,0, 7,0,2,1,7,9,8,6,0,9,4,3,7,0,2,7,7,0,5,3,9,2,1,7,1,7,6,2,9,3,1,7,6,7,5,2,3,8,4,6,7,4,8,1,8,4,6,
      7,6,6,9,4,0,5,1,3,2,0,0,0,5,6,8,1,2,7,1,4,5,2,6,3,5,6,0,8,2,7,7,8,5,7,7,1,3,4,2,7,5,7,7,8,9,6,0,9,1,7,3,
      6,3,7,1,7,8,7,2,1,4,6,8,4,4,0,9,0,1,2,2,4,9,5,3,4,3,0,1,4,6,5,4,9,5,8,5,3,7,1,0,5,0,7,9,2,2,7,9,6,8,9,2,5,8};
    
    BigInt BIPi = new BigInt(Pi); 
    
    System.out.println(BIPi.add(BIPi.add(BIPi.add(BIPi)))); 
    System.out.println(); 
    
  }
  
  
}